// 
// --- GRID PROJECT
// 

class ProjectGrid {
    /**
     * Constructor
     */
    constructor() {
        this.lazyobj = {
            'wrapper': [...document.querySelectorAll('.project__item')],
            'element': '*[data-lazy="lazy"]'
        };
        // matrix
        this.matrix = {
            desktop: {
                one: ['data-one-src', 'data-three-src'],
                two: ['data-two-src', 'data-two-src', 'data-three-src', 'data-three-src', 'data-three-src', 'data-three-src']
            },
            mobile: ['data-three-src', 'data-two-src']
        };
    }

    /**
     * Calc
     */
    calc() {
        // obj
        this.projList = document.querySelector('*[data-proj-list="all"]');
        // if exist element
        if (this.projList) {
            // select element
            this.obj = [...document.querySelector('*[data-proj-list="all"]').querySelectorAll('.project__item')];
            // data
            this.data = [];
            // event
            this.event = null;
            // init
            this.init();
        }
    }

    /**
     * Init
     */
    init() {
        this.search();
        this.staps();
    }

    /**
     * Init
     */
    staps() {
        let evech = () => {
            this.change();
            this.lazy();
        };
        // body funciton
        let run = () => {
            if (innerWidth > 767) {
                if (this.event != 'desktop') {
                    this.event = 'desktop';
                    evech();
                }
            } else {
                if (this.event != 'mobile') {
                    this.event = 'mobile';
                    evech();
                }
            }
        };
        // add event
        if (this.event == null) {
            // state change
            run();
            // add event
            window.addEventListener('resize', run);
        }
    }

    /**
     * Body stap
     */
    search() {
        this.data[0] = [];
        // 
        for (let i = 0; i < 2; i++) {
            this.data[0].push(this.obj[i]);
        }
        // calc length
        let leng = (this.obj.length - 2) / 6;
        leng = Math.ceil(leng);
        //
        for (let i = 0; i < leng; i++) {
            // 
            let num = this.data.length++;
            this.data[num] = [];
            // 
            for (let m = num * 6 - 4; m < num * 6 + 2; m++) {
                if (this.obj[m] != undefined) {
                    this.data[num].push(this.obj[m]);
                }
            }
        }
    }

    /**
     * Change stap
     */
    change() {
        // scan object
        this.data.map((el, index) => {
            // scan element
            el.map((ell, indexx) => {
                if (ell != undefined) {
                    // one section desktop
                    if (index == 0) {
                        this.cont(ell, this.matrix.desktop.one[indexx], 'desktop');
                    }
                    // two section desktop
                    if (index > 0) {
                        this.cont(ell, this.matrix.desktop.two[indexx], 'desktop');
                    }
                    // first case mobile
                    if (index + indexx == 0) {
                        this.cont(ell, this.matrix.mobile[0], 'mobile');
                    }
                    // not first case mobile
                    if (index + indexx > 0) {
                        this.cont(ell, this.matrix.mobile[1], 'mobile');
                    }
                }
            });
        });
    }

    /**
     * Type element
     */
    type(name) {
        if (name.match(/(jpg|jpeg|png|svg|gif)$/ig) != null) {
            return 'images';
        }
        if (name.match(/(mp4)$/ig) != null) {
            return 'video';
        }
    }

    /**
     * Cont stap
     */
    cont(ell, data, type) {
        // data param
        let srcimg = ell.getAttribute(data),
            typecont = this.type(srcimg);
        // desktop content
        if (type == 'desktop') {
            // photo
            if (typecont == 'images') {
                this.apply({
                    'wrap': ell,
                    'url': srcimg,
                    'element': '.projects__image',
                    'enable': '.projects__image',
                    'disable': '.project__video'
                });
            }
            // video
            if (typecont == 'video') {
                this.apply({
                    'wrap': ell,
                    'url': srcimg,
                    'element': '.project__video video',
                    'enable': '.project__video',
                    'disable': '.projects__image'
                });
            }
        }
        // mobile content
        if (type == 'mobile') {
            // photo
            if (typecont == 'images') {
                this.apply({
                    'wrap': ell,
                    'url': srcimg,
                    'element': '.projects__image-mob',
                    'enable': '.projects__image-mob',
                    'disable': '.project__video-mob'
                });
            }
            // video
            if (typecont == 'video') {
                this.apply({
                    'wrap': ell,
                    'url': srcimg,
                    'element': '.project__video-mob video',
                    'enable': '.project__video-mob',
                    'disable': '.projects__image-mob'
                });
            }
        }
    }

    /**
     * Data active
     */
    apply(obj) {
        // src
        obj.wrap.querySelector(obj.element).setAttribute('data-src', obj.url);
        // enable
        obj.wrap.querySelector(obj.enable).setAttribute('data-view', 'enable');
        // disable
        obj.wrap.querySelector(obj.disable).setAttribute('data-view', 'disable');
    }

    /**
     * Lazy
     */
    lazy() {
        // check element
        this.lazyobj.wrapper.map(obj => {
            // element display block
            if (obj.getBoundingClientRect().width > 0) {
                [...obj.querySelectorAll(this.lazyobj.element)].map(el => {
                    if (el.getAttribute('data-src') != null) {
                        if (el.getBoundingClientRect().width > 0) {
                            // set attribute
                            el.setAttribute('src', el.getAttribute('data-src'));
                            // remove attribute
                            el.removeAttribute("data-src");
                        }
                    }
                });
            };
        });
    }
}

// 
// GRID PROJECT ---
// 





// 
// --- INDISSOLUBLE SPACE
// 

class StringSpace {

    /**
     * Data
     */
    constructor() {
        // ===
        this._ru = ['а', 'без', 'безо', 'в', 'во', 'вне', 'да', 'для', 'до', 'ее', 'еще', 'и', 'или', 'из', 'изо', 'или', 'их', 'за', 'к', 'как', 'ко', 'меж', 'на', 'над', 'не', 'ни', 'но', 'о', 'об', 'обо', 'от', 'ото', 'по', 'под', 'при', 'про', 'с', 'со', 'то', 'там', 'у', 'уж', 'что', 'я'];
        // ===
        this._en = ['and', 'at', 'by', 'for', 'from', 'in', 'on', 'past', 'since', 'till', 'down', 'from', 'into', 'off', 'onto', 'of', 'over', 'past', 'under', 'up', 'close', 'over', 'past', 'above', 'at', 'also', 'below', 'the', 'a', 'by', 'near', 'under', 'at', 'in', ];
        // ===
        this._elem = [...document.querySelectorAll('H2, H1, H3, H4, H5, H6, p')];
    }

    /**
     * Init
     */
    run() {
        // p dom element
        this._elem.map(obj => {
            this.translate(obj);
        });
    }

    /**
     * Translate
     */
    translate(obj) {
        // ru lang
        this._ru.map(dat => {
            let string = new RegExp(' ' + dat + ' ', 'ig');
            obj.innerHTML = obj.innerHTML.replace(string, ` ${dat}&nbsp;`);
        });
        // en lang
        this._en.map(dat => {
            let string = new RegExp(' ' + dat + ' ', 'ig');
            obj.innerHTML = obj.innerHTML.replace(string, ` ${dat}&nbsp;`);
        });
    }
}

let sspace = new StringSpace;
sspace.run();

// 
// INDISSOLUBLE SPACE ---
// 





// 
// --- LANGUAGE TRANSLATE
// 

class Lang {

    /**
     * Init param
     */
    constructor() {
        // language
        this.cont = ['ru', 'uk', 'be'];
        // language brouser
        this.lang = window.navigator.language.substr(0, 2);
    }

    /**
     * Select language
     */
    select() {
        // result
        let result = 0;
        // calc result
        this.cont.map(obj => {
            if (obj == this.lang) {
                result = 1;
            }
        });
        // change
        if (result == 0) {
            this.change();
            sspace.run();
        }
    }

    /**
     * Change language
     */
    change() {
        // all element laguage
        let el = document.querySelectorAll(`*[data-lang]`);
        // change language
        [...el].map(obj => {
            let cont = obj.innerHTML;
            obj.innerHTML = obj.getAttribute('data-lang');
            obj.setAttribute('data-lang', cont);
        });
    }
}

let lang = new Lang;
lang.select();

// 
// LANGUAGE TRANSLATE ---
//



// 
// --- FORM MASK
// 

Inputmask({ regex: "[0-9+]*" }).mask('input[data-send-field="phone"]');

// 
// FORM MASK ---
// 



// 
// --- BUTTON AUTO CLICK IN GRID
// 

class ButtonScroll {
    /**
     * Constructor
     */
    constructor(data) {
        // button element
        this.button = document.querySelector(data.obj);
        // run
        if(this.button != null){
            this.run();
        }
    }

    /**
     * Run
     */
    run(){
        window.addEventListener('scroll', this.scroll.bind(this));
    }

    /**
     * Scroll
     */
    scroll(event){
        // calc value
        let 
        // width
        width = this.button.getBoundingClientRect().width,
        // bottom
        bottom = this.button.getBoundingClientRect().bottom,
        // cord
        cord = bottom - innerHeight;

        if(width > 0){
            if(cord <= 0){
                this.button.click();
            }
        }
    }
}

new ButtonScroll({
    'obj': '*[data-button-load]',
});

// 
// BUTTON AUTO CLICK IN GRID ---
// 